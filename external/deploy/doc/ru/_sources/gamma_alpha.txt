.. _gamma:

******************************
Гамма-коррекция и прозрачность
******************************

Общее описание
==============

Сущность гамма-коррекции заключается в упаковке яркости канала изображения в 8
битах информации. Особенности восприятия человеческого глаза и технические
характеристики электронно-лучевых трубок имеют вторичное значение.

Графические редакторы обычно работают в нелинейном цветовом пространстве,
где тёмные компоненты кодируются большим числом битов чем светлые. Это означает,
что значению 0.5 от реальной интенсивности света (физической величины, называемой
освещённость) будет соответствовать большее значение, содержащееся в каналах RGB (в самом
простом случае 0.5 ^ (1/2.2) = 0.73).

.. image:: src_images/gamma/gamma.jpg
   :alt: Гамма-коррекция
   :align: center
   :width: 100%

|

Изображения всегда сохраняются в нелинейном пространстве, в противном случае 8
бит информации не достаточно для кодирования интенсивности света, что приведёт к
тому, что тёмные тона будут отображаться некорректно.

Веб-браузеры работают в нелинейном пространстве.

Blender при настройке сцены ``Color Managment > Display Device > sRGB`` работает в линейном
пространстве. Значения цветов материалов и настройки источников света
соответствует физическим величинам. При работе с текстурами, за исключением карт
нормалей необходимо выставить настройку изображения ``Image > Input Color Space > sRGB``.
В этом случае при рендеринге будет производится автоматическая распаковка
изображения: sRGB->Linear.

Движки и рендереры работают в линейном пространстве, поскольку только оно может
адекватно представлять поведение света в реальном мире. Если взять две
одинаковые лампочки и включать их последовательно, освещённость от воздействия
обеих будет ровно в два раза превышать освещённость только от одной. 

Примеры величин освещённости:

+---------------------+------------------+
| Описание            | Освещённость,лк  | 
+=====================+==================+
| Летом в полдень     | 17 000           |
+---------------------+------------------+
| Зимой в полдень     | 5 000            |
+---------------------+------------------+
| В пасмурный день    | 1 000            |
+---------------------+------------------+
| В светлой комнате   | 100              |
+---------------------+------------------+
| Ночью в полнолуние  | 0.2              |
+---------------------+------------------+
| В безлунную ночь    | 0.001            |
+---------------------+------------------+

Человеческое зрение, ЭЛТ-мониторы
=================================

Человеческое восприятие света нелинейно (человек лучше различает градации
тусклого света чем яркого), однако свет, поступающий в глаз,
по-прежнему должен подчиняться физическим законам (см. пример с лампочками).

ЭЛТ-мониторы имеют нелинейную характеристику яркости от приложенного к их входу
электрического напряжения (чаще всего определяется непосредственно значением
канала цветности в видеопамяти), подобную же характеристику копируют мониторы,
основанные на других технологиях. Однако свет, излучаемый такими мониторами,
должен подчиняться физическим законам. В идеальном случае при добавлении второго
источника света на сцену в виртуальном мире, яркость пикселей на экране монитора
должна увеличиваться в два раза.

Гамма
=====

Используется в формуле:

    V\ :sub:`out` = V\ :sub:`in`\ :sup:`γ`

γ < 1 - упаковывающая гамма, γ > 1 - распаковывающая гамма. В наиболее простом
случае используются значения 1/2.2 и 2.2 соответственно. Далее вместо термина
"гамма-коррекция" будут использованы термины "упаковка" и "распаковка". Сильно
упрощая, под упаковкой понимается преобразование Linear->sRGB, под распаковкой
sRGB->Linear.

.. _gamma_nodes:

Коррекция в нодовых материалах
==============================

При использовании текстур и вертексных цветов в качестве источников цвета,
необходима распаковка (sRGB->Linear). Нода текстуры уже включает в себя
распаковку, в то время как для вертексного цвета необходимо использовать ноду
`SRGB_TO_LINEAR`.

При использовании карт нормалей никакие преобразования не производятся.

При использовании текстур и вертексных цветов в качестве масок для смешения
цветов или других математических операций в преобразованиях нет необходимости.
Однако в этом случае следует обратить внимание на то, как происходит
преобразование цветов при сохранении изображений в графических редакторах. В
большинстве случаев значения, выставленные в редакторе, попадают в изображения без
изменений. Иногда возможна небольшая коррекция, которая не будет
иметь существенного влияния на итоговый результат.

Как было сказано ранее, ноды текстуры включают в себя распаковку. Это приводит к
необходимости двойного преобразования обратно в нелинейное пространство, для
чего используется нода `LINEAR_TO_SRGB`.

Сводная таблица коррекции в нодовых материалах:

+-----------------------------+--------------------------+
| Случай использования        | Коррекция                |
+=============================+==========================+
| Текстура для окраски        | встроена в ноду текстуры |
+-----------------------------+--------------------------+
| Вертексный цвет для окраски | SRGB_TO_LINEAR           |
+-----------------------------+--------------------------+
| Карта нормалей              | не требуется             |
+-----------------------------+--------------------------+
| Текстура для маски          | LINEAR_TO_SRGB           |
+-----------------------------+--------------------------+
| Вертексный цвет для маски   | не требуется             |
+-----------------------------+--------------------------+

Альфа-композитинг
=================

Физически корректный альфа-композитинг осуществляется по формуле:

    :math:`C_o = C_a \alpha_a + C_b \alpha_b (1 - \alpha_a)`.

Формула отличается от классической операции смешивания (mix, выпуклая комбинация) наличием множителя :math:`\alpha_b` во втором слагаемом. То есть, для осуществления альфа-композитинга, необходимо знать не только альфу пикселя-источника, то и альфу пикселя, поверх которого осуществляется рендеринг.

В случае предварительного умножения значений альфы на цветовые каналы (т.н.
Premultiplied Alpha):

    :math:`C_o = C_a + C_b (1 - \alpha_a)`.
    
Последняя формула используется также для расчёта результирующей альфы:

    :math:`\alpha_o = \alpha_a + \alpha_b (1 - \alpha_a)`.
    
Предварительное умножение цветовых каналов на значение альфы позволяет сэкономить две операции умножения, однако более существенным является тот факт, что полученная формула может использоваться многократно, без необходимости деления исходного пикселя на значение альфы на каждой последующей итерации.

Таким образом, функция смешивания WebGL должна иметь вид:

.. code-block:: none

    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

Инициализация контекста должна производиться с параметром `premultipliedAlpha : true`. Кроме того, необходимо обеспечить правильный рендеринг прозрачных материалов на выходе шейдера, для чего используется умножение всех каналов цветности на значение альфы.



