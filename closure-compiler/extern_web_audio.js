function AudioContext() {};
AudioContext.prototype.oncomplete;
AudioContext.prototype.activeSourceCount;
AudioContext.prototype.listener;
AudioContext.prototype.sampleRate;
AudioContext.prototype.currentTime;
AudioContext.prototype.destination;
AudioContext.prototype.createBuffer;
AudioContext.prototype.decodeAudioData;
AudioContext.prototype.createBufferSource;
AudioContext.prototype.createMediaStreamDestination;
AudioContext.prototype.createGain;
AudioContext.prototype.createDelay;
AudioContext.prototype.createBiquadFilter;
AudioContext.prototype.createWaveShaper;
AudioContext.prototype.createPanner;
AudioContext.prototype.createConvolver;
AudioContext.prototype.createDynamicsCompressor;
AudioContext.prototype.createAnalyser;
AudioContext.prototype.createScriptProcessor;
AudioContext.prototype.createOscillator;
AudioContext.prototype.createChannelSplitter;
AudioContext.prototype.createChannelMerger;
AudioContext.prototype.startRendering;
AudioContext.prototype.createGainNode;
AudioContext.prototype.createDelayNode;
AudioContext.prototype.createJavaScriptNode;
AudioContext.prototype.createMediaElementSource;
AudioContext.prototype.createMediaStreamSource;
AudioContext.prototype.createPeriodicWave;
AudioContext.prototype.addEventListener;
AudioContext.prototype.removeEventListener;
AudioContext.prototype.dispatchEvent;
function AudioListener() {};
AudioListener.prototype.speedOfSound;
AudioListener.prototype.dopplerFactor;
AudioListener.prototype.setPosition;
AudioListener.prototype.setOrientation;
AudioListener.prototype.setVelocity;
function AudioBufferSourceNode() {};
AudioBufferSourceNode.prototype.onended;
AudioBufferSourceNode.prototype.looping;
AudioBufferSourceNode.prototype.loopEnd;
AudioBufferSourceNode.prototype.loopStart;
AudioBufferSourceNode.prototype.loop;
AudioBufferSourceNode.prototype.playbackRate;
AudioBufferSourceNode.prototype.gain;
AudioBufferSourceNode.prototype.playbackState;
AudioBufferSourceNode.prototype.buffer;
AudioBufferSourceNode.prototype.channelInterpretation;
AudioBufferSourceNode.prototype.channelCountMode;
AudioBufferSourceNode.prototype.channelCount;
AudioBufferSourceNode.prototype.numberOfOutputs;
AudioBufferSourceNode.prototype.numberOfInputs;
AudioBufferSourceNode.prototype.context;
AudioBufferSourceNode.prototype.start;
AudioBufferSourceNode.prototype.stop;
AudioBufferSourceNode.prototype.noteOn;
AudioBufferSourceNode.prototype.noteGrainOn;
AudioBufferSourceNode.prototype.noteOff;
AudioBufferSourceNode.prototype.UNSCHEDULED_STATE;
AudioBufferSourceNode.prototype.SCHEDULED_STATE;
AudioBufferSourceNode.prototype.PLAYING_STATE;
AudioBufferSourceNode.prototype.FINISHED_STATE;
AudioBufferSourceNode.prototype.connect;
AudioBufferSourceNode.prototype.disconnect;
AudioBufferSourceNode.prototype.addEventListener;
AudioBufferSourceNode.prototype.removeEventListener;
AudioBufferSourceNode.prototype.dispatchEvent;
function PannerNode() {};
PannerNode.prototype.coneOuterGain;
PannerNode.prototype.coneOuterAngle;
PannerNode.prototype.coneInnerAngle;
PannerNode.prototype.rolloffFactor;
PannerNode.prototype.maxDistance;
PannerNode.prototype.refDistance;
PannerNode.prototype.distanceModel;
PannerNode.prototype.panningModel;
PannerNode.prototype.channelInterpretation;
PannerNode.prototype.channelCountMode;
PannerNode.prototype.channelCount;
PannerNode.prototype.numberOfOutputs;
PannerNode.prototype.numberOfInputs;
PannerNode.prototype.context;
PannerNode.prototype.setPosition;
PannerNode.prototype.setOrientation;
PannerNode.prototype.setVelocity;
PannerNode.prototype.EQUALPOWER;
PannerNode.prototype.HRTF;
PannerNode.prototype.SOUNDFIELD;
PannerNode.prototype.LINEAR_DISTANCE;
PannerNode.prototype.INVERSE_DISTANCE;
PannerNode.prototype.EXPONENTIAL_DISTANCE;
PannerNode.prototype.connect;
PannerNode.prototype.disconnect;
PannerNode.prototype.addEventListener;
PannerNode.prototype.removeEventListener;
PannerNode.prototype.dispatchEvent;
function GainNode() {};
GainNode.prototype.gain;
GainNode.prototype.channelInterpretation;
GainNode.prototype.channelCountMode;
GainNode.prototype.channelCount;
GainNode.prototype.numberOfOutputs;
GainNode.prototype.numberOfInputs;
GainNode.prototype.context;
GainNode.prototype.connect;
GainNode.prototype.disconnect;
GainNode.prototype.addEventListener;
GainNode.prototype.removeEventListener;
GainNode.prototype.dispatchEvent;
function AudioParam() {};
AudioParam.prototype.units;
AudioParam.prototype.name;
AudioParam.prototype.defaultValue;
AudioParam.prototype.maxValue;
AudioParam.prototype.minValue;
AudioParam.prototype.value;
AudioParam.prototype.setValueAtTime;
AudioParam.prototype.linearRampToValueAtTime;
AudioParam.prototype.exponentialRampToValueAtTime;
AudioParam.prototype.setTargetAtTime;
AudioParam.prototype.cancelScheduledValues;
AudioParam.prototype.setTargetValueAtTime;
AudioParam.prototype.setValueCurveAtTime;
function ConvolverNode() {};
ConvolverNode.prototype.normalize;
ConvolverNode.prototype.buffer;
ConvolverNode.prototype.channelInterpretation;
ConvolverNode.prototype.channelCountMode;
ConvolverNode.prototype.channelCount;
ConvolverNode.prototype.numberOfOutputs;
ConvolverNode.prototype.numberOfInputs;
ConvolverNode.prototype.context;
ConvolverNode.prototype.connect;
ConvolverNode.prototype.disconnect;
ConvolverNode.prototype.addEventListener;
ConvolverNode.prototype.removeEventListener;
ConvolverNode.prototype.dispatchEvent;
function DynamicsCompressorNode() {};
DynamicsCompressorNode.prototype.release;
DynamicsCompressorNode.prototype.attack;
DynamicsCompressorNode.prototype.reduction;
DynamicsCompressorNode.prototype.ratio;
DynamicsCompressorNode.prototype.knee;
DynamicsCompressorNode.prototype.threshold;
DynamicsCompressorNode.prototype.channelInterpretation;
DynamicsCompressorNode.prototype.channelCountMode;
DynamicsCompressorNode.prototype.channelCount;
DynamicsCompressorNode.prototype.numberOfOutputs;
DynamicsCompressorNode.prototype.numberOfInputs;
DynamicsCompressorNode.prototype.context;
DynamicsCompressorNode.prototype.connect;
DynamicsCompressorNode.prototype.disconnect;
DynamicsCompressorNode.prototype.addEventListener;
DynamicsCompressorNode.prototype.removeEventListener;
DynamicsCompressorNode.prototype.dispatchEvent;

